/******************************************************
 * Filename: ReadMe
 *
 * Description: documentation for project
 *
 * Group: SegFault
 * Authors: Lucas Stuyvesant, Garrett Ransom, Jonathan Brandt, Travis Nordquist
 * Class: CSE 325
 * Instructor: Zheng
 * Assignment: Lab Project #2
 * Assigned: Feb. 5, 2016
 * Due: Feb. 19, 2016
******************************************************/

	The goal of this lab was to creat a process queue. We used a simple UI 
that works with the terminal. We then needed to enque, deque, delete and list 
the contents of the queue. 

We used a doubly linked list to implement the queue.  Each node contained a next 
and prev pointer, as well as a pointer to the process it represented.  The 
Process was a struct containing a Process ID, pws, a page-table, and an array to 
represent its assigned registers.
We move data via pointers. Adding data involves a malloc and removing data involves 
a free, for both the Node and Process structures.

Testing Results:
   Testing involved multiple developers implementing use cases to test thorough 
coverage of error handling as well as proper functionality in specific edge cases. 
Enqueue works well. All arguments are read and stored properly.  A single point of 
interest involving the enqueue- tests were conducted with space for 2 registers 
entered in the process (this constant can be changed in the header file).  When a 
process is enqueued with more arguments than variable storage, the overflow is 
ignored. When a process is enqueued with fewer args than storage, a default zero 
value is used.  
Using letters instead of integers for arguements when enqueueing also results in 
interpreting those letters as zero and continues to enqueue the process.  
The dequeue, successfully pops the process from the front of the queue, and the 
list() lists the PID of each process in the queue. 
Enqueueing more than the defined limit throws an error.  This limit can also be 
changed in the header file.  
The delete function successfully removes all processes sharing the specified pid 
from anywhere in the stack.

any bugs: None known.  

Completed the isEmpty, isFull, and clear functions

